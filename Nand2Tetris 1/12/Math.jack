// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThePower;
    static int bitSize;

    /** Initializes the library. */
    function void init() {
        var int n, powerOfTwo;

        let bitSize = 16;

        let twoToThePower = Array.new(bitSize);
        let powerOfTwo = 1;
        let n = 0;

        while (n < bitSize) {
            let twoToThePower[n] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let n = n + 1;
        }

        return;
    }

    // Returns the n-th bit of x
    function int bit(int x, int n) {
        return ~((twoToThePower[n] & x) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, n, x0;

        let sum = 0;
        let n = 0;
        let x0 = x;

        while (n < bitSize) {
            if (Math.bit(y, n) = 1) {
                let sum = sum + x0;
            }
            let x0 = x0 + x0;
            let n = n + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, res, nx, ny;

        if (y = 0) {
            do Sys.error(3);
            return 0;
        }

        let nx = x < 0;
        let ny = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);

        if ((x - 2 * q * y) > y) {
            let res = 2 * q;
        } else {
            let res = 2 * q + 1;
        }

        if (nx = ny) {
            return res;
        }
        return -res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, nextY, nextYSquared, n;

        let y = 0;
        let n = bitSize / 2 - 1;

        while (~(n < 0)) {
            let nextY = y + twoToThePower[n];
            let nextYSquared = nextY * nextY;
            if (~(nextYSquared > x) & (nextYSquared > 0)) {
                let y = nextY;
            }
            let n = n - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
         if (a > b) {
            return b;
        }
        return a;
    }
}
